import os
import json
import yaml

from customize_pipeline import get_region_id, check_rule_existence, get_merge_rule_name, get_var_path_map


configfile: "./config.yaml"

# Load default pipeline
default_snakefile = "../snakefile"
module default_pipeline:
    snakefile: default_snakefile
    config: config

# Import rules from default pipeline
use rule * from default_pipeline

WORKING_DIR = default_pipeline.WORKING_DIR
LOG_DIR = default_pipeline.LOG_DIR
FORGE_CONFIG = default_pipeline.FORGE_CONFIG
NEXUS_ATLAS_ENV = default_pipeline.NEXUS_ATLAS_ENV
NEXUS_ATLAS_ORG = default_pipeline.NEXUS_ATLAS_ORG
NEXUS_ATLAS_PROJ = default_pipeline.NEXUS_ATLAS_PROJ
PUSH_DATASET_CONFIG = default_pipeline.PUSH_DATASET_CONFIG_FILE
NEXUS_DESTINATION_ENV = default_pipeline.NEXUS_DESTINATION_ENV
NEXUS_DESTINATION_ORG = default_pipeline.NEXUS_DESTINATION_ORG
NEXUS_DESTINATION_PROJ = default_pipeline.NEXUS_DESTINATION_PROJ
IS_PROD_ENV = default_pipeline.IS_PROD_ENV
atlas_release_id = default_pipeline.atlas_release_id
brain_region_id = default_pipeline.brain_region_id


with open("customize_pipeline/available_vars.yaml", "r") as vars_file:
    AVAILABLE_VARS = yaml.safe_load(vars_file.read().strip())
var_path_map = get_var_path_map(AVAILABLE_VARS["input"], PUSH_DATASET_CONFIG)

user_config_file = "customize_pipeline/user_config.json"

user_config = json.load(open(user_config_file))
user_rules = user_config["rules"]
for user_rule in user_rules:
    rule_name = user_rule["rule"]
    default_rule = getattr(rules, rule_name, None)
    check_rule_existence(default_rule, rule_name)

    default_output = getattr(default_rule, "output")
    default_output_dir = getattr(default_output, "dir", default_output)
    merged_output = f"{default_output_dir}_merged"

    custom_regions_rules = []
    for region_customization in user_rule["execute"]:
        region_id = get_region_id(region_customization["brainRegion"])
        region_rule_name = f"{rule_name}_region{region_id}"

        # Define region-specific rule for the region provided in the user-configuration
        rule:
            name: region_rule_name
            input:
                **var_path_map,
            output:
                directory(region_customization['output_dir'])
            log:
                f"{LOG_DIR}/{region_rule_name}.log"
            container:
                region_customization['container']
            shell:
                region_customization['command']

        custom_regions_rules.append(getattr(rules, region_rule_name))

    ##>merge_rule : Merge the outputs from region-specific rules into the default rule output
    merge_rule_name = get_merge_rule_name(rule_name)
    rule:
        name: merge_rule_name
        input:
            [custom_rule.output for custom_rule in custom_regions_rules],
            **var_path_map,
            default_output_dir = default_output_dir,
        output:
            directory(merged_output)
        log:
            f"{LOG_DIR}/{merge_rule_name}.log"
        run:
            import shutil
            import customize_pipeline
            metadata_path = None
            if rule_name == "placement_hints":
                metadata_path = default_output.metadata
            customize_pipeline.main(input.hierarchy, input.annotation, user_rule,
                input.default_output_dir[0], output[0], metadata_path)
            shutil.copytree(output, input.default_output_dir[0])
